/* ************************************************************************** */
/* ********************** FILE DEFINITION SECTION *************************** */
/* ************************************************************************** */
/* File Name   : ADC_int.h												  */
/* Author      : MAAM														  */
/* Version     : v00														  */
/* date        : Mar 27, 2023												  */
/* ************************************************************************** */
/* ************************ HEADER FILES INCLUDES **************************  */
/* ************************************************************************** */

#ifndef ADC_INT_H_
#define ADC_INT_H_

/* ************************************************************************** */
/* ********************** TYPE_DEF/STRUCT/ENUM SECTION ********************** */
/* ************************************************************************** */

typedef enum{
    ADC0 = (u8)0u,
    ADC1,
    ADC2,
    ADC3,
    ADC4,
    ADC5,
    ADC6,
    ADC7
}ADC_tenuChannel;      // ADC Voltage Reference Selections

/* ************************************************************************** */
/* ************************** MACRO/DEFINE SECTION ************************** */
/* ************************************************************************** */

#define ADC_CHANNELS_NUM		4

/* ************************************************************************** */
/* ***************************** CONST SECTION ****************************** */
/* ************************************************************************** */

/* ************************************************************************** */
/* ***************************** VARIABLE SECTION *************************** */
/* ************************************************************************** */

/* ************************************************************************** */
/* **************************** FUNCTION SECTION **************************** */
/* ************************************************************************** */

/* ************************************************************************** */
/* Description :  	Initialization of the ADC								  */
/* Input       :	void													  */
/* Return      :	void													  */
/* ************************************************************************** */
void ADC_vidInit(void);

/* ************************************************************************** */
/* Description :  	Configuration of the Channel							  */
/* Input       :	u8Channel												  */
/* Return      :	LBTY_tenuErrorStatus									  */
/* ************************************************************************** */
LBTY_tenuErrorStatus ADC_vidCofigChannel(u8 u8Channel);

/* ************************************************************************** */
/* Description :  	Enable ADC to be ready for conversion					  */
/* Input       :	void													  */
/* Return      :	void													  */
/* ************************************************************************** */
void ADC_voidEnable(void);

/* ************************************************************************** */
/* Description :  	Disable ADC to be wont make further conversions			  */
/* Input       :	void													  */
/* Return      :	void													  */
/* ************************************************************************** */
void ADC_voidDisable(void);

/* ************************************************************************** */
/* Description :  	Set Channel												  */
/* Input       :	u8Channel												  */
/* Return      :	void													  */
/* ************************************************************************** */
void ADC_vidSetChannel(u8 u8Channel);

/* ************************************************************************** */
/* Description :  	Start conversion										  */
/* Input       :	void													  */
/* Return      :	void													  */
/* ************************************************************************** */
void ADC_vidStartConversion(void);

/* ************************************************************************** */
/* Description :  	wait conversion	done									  */
/* Input       :	void													  */
/* Return      :	void													  */
/* ************************************************************************** */
void ADC_vidWaitConversion(void);

/* ************************************************************************** */
/* Description :  	Get ADC Read											  */
/* Input       :	void													  */
/* Return      :	u16														  */
/* ************************************************************************** */
u16 ADC_u16GetData(void);

/* ************************************************************************** */
/* Description :  	Get ADC Read V											  */
/* Input       :	void													  */
/* Return      :	f32														  */
/* ************************************************************************** */
f32 ADC_f32GetVoltage(void);

/* ************************************************************************** */
/* Description :  	start ADC Read of the channel							  */
/* Input       :	u8Channel												  */
/* Return      :	LBTY_tenuErrorStatus									  */
/* ************************************************************************** */
LBTY_tenuErrorStatus ADC_u8StartRead(u8 u8Channel);

/* ************************************************************************** */
/* Description :  	Get the ADC Read of the channel							  */
/* Input       :	u8Channel												  */
/* Input/Output:    pu16ADC_Value											  */
/* Return      :	LBTY_tenuErrorStatus									  */
/* ************************************************************************** */
LBTY_tenuErrorStatus ADC_u8ReadChannel(u8 u8Channel, u16* pu16ADC_Value);

/* ************************************************************************** */
/* Description :  	Get the ADC Read from Conversion Array					  */
/* Input       :	u8Channel												  */
/* Input/Output:    pu16ADC_Value											  */
/* Return      :	LBTY_tenuErrorStatus									  */
/* ************************************************************************** */
LBTY_tenuErrorStatus ADC_u8ReadConvValue(u8 u8Channel, u16* pu16ADC_Value);

/* ************************************************************************** */
/* Description :  	Start the ADC Interrupt Conversion						  */
/* Input       :	void													  */
/* Return      :	LBTY_tenuErrorStatus									  */
/* ************************************************************************** */
LBTY_tenuErrorStatus ADC_u16RefreshADC(void);

/* ************************************************************************** */
/* Description :  	Get the ADC Interrupt Conversion						  */
/* Input       :	pu16ADC_Value											  */
/* Return      :	LBTY_tenuErrorStatus									  */
/* ************************************************************************** */
LBTY_tenuErrorStatus ADC_u16GetADC(u16 pu16ADC_Value[ADC_CHANNELS_NUM]);

/* ************************************************************************** */
/* Description :  	Pass the CallBack function to TMR ISR to execute		  */
/* Input       :	void													  */
/* Return      :	void													  */
/* ************************************************************************** */
void Timer_vidSetCallBack(void (*pvidCallBack)(void));


#endif /* ADC_INT_H_ */
/*************************** E N D (ADC_int.h) ******************************/
